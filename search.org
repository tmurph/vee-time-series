#+TITLE: Regression Analysis Fall 2012
#+AUTHOR: Trevor Murphy
#+EMAIL: trevor.m.murphy+vee@gmail.com

#+OPTIONS: num:nil toc:nil

#+BEGIN_SRC latex
  \begin{abstract}
    We look at bitcoin trading data from the Mt Gox bitcoin exchange.
  \end{abstract}
#+END_SRC

* Introduction

Time series analysis can be helpful, I suppose. Perhaps it can tell us
something interesting about currencies?

Bitcoin is a fake currency that the internet invented. Despite that, it
seems to be doing something significant. Let's see.

* Data and Analysis

Mt Gox is an online bitcoin exchange, trading in various currencies from
around the world.  For various reasons, they make their trading data
available for analysis.

Bitcoincharts summarizes this data in a convenient format.

** Data Description

The data obtained from bitcoincharts gives basic trading info, in the
following format:

unixtime, price, amount

Here's some sample trades.

** Analysis with Python

Python is pretty sweet.  I'm not sure what to do for time series
analysis, since that's boring, but I'll bet I can pull off something
cool.

** Model

We settled with an AR(1) model ... or maybe MA(2) I dunno.  Here are
some graphs that show what's up.

* Conclusion

As you can see ... nothing.  Time series is terrible.

* Appendix

Maybe ... if you want some stuff it's here.

* Source Code							   :noexport:
:PROPERTIES:
:cache: yes
:END:

Evaluate this code block to update the report.
#+BEGIN_SRC sh :results silent
  make Makefile
  make
#+END_SRC

** Makefile
:PROPERTIES:
:eval:     never
:END:

#+NAME: grab-google-ngrams
#+BEGIN_SRC makefile :tangle yes
  .RECIPEPREFIX = >
  .DELETE_ON_ERROR :
  .PRECIOUS : 
  .DEFAULT : all
  
  datadir := data
  datafiles := report.csv scrubbed-report.csv
  trendurl := https://www.google.com/trends/explore\#q=%22job%20search%22&date=1%2F2004%20109m&cmpt=q
  
  .PHONY : all
  all : $(addprefix $(datadir)/,$(datafiles))
  
  .PHONY : clean
  clean :
  
  $(datadir)/report.csv :
  > @echo
  > @echo "Whoops!  Google, as of this writing, does not facilitate automatic"
  > @echo "downloading of trend reports.  Afraid you'll have to manually locate the"
  > @echo "\"$(@F)\" file and place it in the \"$(@D)\" folder to continue."
  > @echo
  > @echo "Head to:"
  > @echo "    $(trendurl)"
  > @echo "and select \"Download as CSV\" to get the \"$(@F)\" file."
  > @echo
  > @echo "Be sure to place the file in the \"$(@D)\" folder, or you'll see this again."
  > @echo
  > @exit 1
  
  $(datadir)/scrubbed-report.csv : $(datadir)/report.csv
  > sed -n -e 's/ .*,/,/' -e '5,/^$$/ p' >$@ <$<
  
  Makefile : search.org
  > emacs -Q --batch --visit=search.org --eval "(progn \
  (require 'org) \
  (require 'org-exp) \
  (require 'ob) \
  (require 'ob-tangle) \
  (re-search-forward \"^[ \\t]*#\\\\+begin_src[^\\n]*$@\") \
  (org-babel-tangle t))"
  > mv -f search.makefile Makefile
#+END_SRC

** Python
:PROPERTIES:
:session:  *Python-Search*
:cache:    no
:END:

#+NAME: declare-imports
#+BEGIN_SRC python
  
  # # Boo, import Axes3D.  This is some object that pieces of the pyplot
  # # module need to know about for 3D plotting.  But pyplot can't find it
  # # by itself.  Needs some handholding - a/k/a a pointless object in the
  # # global namespace.  Bad, bad, matplotlib.  Not Pythonic.  No biscuit.
  # from mpl_toolkits.mplot3d import Axes3D
  import matplotlib.pyplot as plt
  # from matplotlib import colors
  # from matplotlib import cm
  # from scipy import stats
  import numpy as np
  import pandas as pd
  from pandas.tools.plotting import autocorrelation_plot
  import statsmodels.api as sm
  # import math
  from datetime import datetime
#+END_SRC

#+RESULTS[4821df35a8ba49af9f0af5cf7112d1245c733868]: declare-imports

#+NAME: get-raw-data-array
#+BEGIN_SRC python :var filename="data/scrubbed-report.csv"
  
  # Read in lines from the data file.
  data = pd.read_csv(filename, index_col='Week', parse_dates=True,
                     date_parser=pd.to_datetime)
  data = data.dropna().asfreq('W')
  data = np.log(data)
#+END_SRC

#+RESULTS[d9cb8bb2736965c5557b5898df6c42850da2a784]: get-raw-data-array

#+NAME: def-partial-autocorr-plot
#+BEGIN_SRC python
  
  def partial_autocorrelation_plot(series, nlags=40, ax=None):
      """Partial autocorrelation plot for time series.
      Modelled heavily on Pandas' autocorrelation_plot function.
  
      Parameters:
      -----------
      series: Time series
      nlags: Number of pacf datapoints to calculate, optional (default 40)
      ax: Matplotlib axis object, optional
  
      Returns:
      -----------
      ax: Matplotlib axis object
      """
      import matplotlib.pyplot as plt
      import statsmodels.api as sm
      n = len(series)
      data = np.asarray(series)
      if ax is None:
          ax = plt.gca(xlim=(1, nlags), ylim=(-1.0, 1.0))
      x = np.arange(nlags) + 1
      y = sm.tsa.pacf(data, nlags)[1:]
      z95 = 1.959963984540054
      z99 = 2.5758293035489004
      ax.axhline(y=z99 / np.sqrt(n), linestyle='--', color='grey')
      ax.axhline(y=z95 / np.sqrt(n), color='grey')
      ax.axhline(y=0.0, color='black')
      ax.axhline(y=-z95 / np.sqrt(n), color='grey')
      ax.axhline(y=-z99 / np.sqrt(n), linestyle='--', color='grey')
      ax.set_xlabel("Order")
      ax.set_ylabel("Partial Autocorrelation")
      ax.plot(x, y)
      ax.grid()
      return ax
#+END_SRC

#+RESULTS: def-partial-autocorr-plot

#+NAME: def-quick-plot
#+BEGIN_SRC python
  
  def quick_plot(data):
      fig, axes = plt.subplots(nrows=2, ncols=1)
      autocorrelation_plot(data, ax=axes[0])
      partial_autocorrelation_plot(data, ax=axes[1])
      plt.show()
#+END_SRC

#+RESULTS: def-quick-plot

#+NAME: show-simple-plot
#+BEGIN_SRC python
  
  # The (p)acf plots show that we're not dealing with a stationary series
  quick_plot(data)
#+END_SRC

#+RESULTS[e8bc120a4b4d444b45d24670508693061bf662ca]: show-simple-plot

#+NAME: def-difference
#+BEGIN_SRC python
  
  # Let's difference the data until it looks nice.
  def difference(ts, periods=1):
      return (ts - ts.shift(periods=periods))[periods:]
#+END_SRC

#+RESULTS: def-difference

#+NAME: show-difference-plot
#+BEGIN_SRC python
  
  first_diff = difference(data)
  quick_plot(first_diff)
#+END_SRC

#+RESULTS: show-difference-plot

#+NAME show-annual-diff-plot
#+BEGIN_SRC python
  
  annual_diff = difference(data, periods=52)
  quick_plot(annual_diff)
#+END_SRC

#+RESULTS:

#+NAME show-comb-diff-plot
#+BEGIN_SRC python
  
  # comb_diff = difference(first_diff, periods=52)
  comb_diff = difference(annual_diff)
  quick_plot(comb_diff)
#+END_SRC

#+RESULTS:

* File Local Variables						   :noexport:

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:

* Footnotes
