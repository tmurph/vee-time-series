#+TITLE: Regression Analysis Fall 2012
#+AUTHOR: Trevor Murphy
#+EMAIL: trevor.m.murphy+vee@gmail.com

#+OPTIONS: num:nil toc:nil

#+BEGIN_SRC latex
  \begin{abstract}
    We look at bitcoin trading data from the Mt Gox bitcoin exchange.
  \end{abstract}
#+END_SRC

* Introduction

Time series analysis can be helpful, I suppose. Perhaps it can tell us
something interesting about currencies?

Bitcoin is a fake currency that the internet invented. Despite that, it
seems to be doing something significant. Let's see.

* Data and Analysis

Mt Gox is an online bitcoin exchange, trading in various currencies from
around the world.  For various reasons, they make their trading data
available for analysis.

Bitcoincharts summarizes this data in a convenient format.

** Data Description

The data obtained from bitcoincharts gives basic trading info, in the
following format:

unixtime, price, amount

Here's some sample trades.

** Analysis with Python

Python is pretty sweet.  I'm not sure what to do for time series
analysis, since that's boring, but I'll bet I can pull off something
cool.

** Model

We settled with an AR(1) model ... or maybe MA(2) I dunno.  Here are
some graphs that show what's up.

* Conclusion

As you can see ... nothing.  Time series is terrible.

* Appendix

Maybe ... if you want some stuff it's here.

* Source Code							   :noexport:
:PROPERTIES:
:cache: yes
:END:

Evaluate this code block to update the report.
#+BEGIN_SRC sh :results silent
  make Makefile
  make
#+END_SRC

** Makefile
:PROPERTIES:
:eval:     never
:END:

#+NAME: grab-google-ngrams
#+BEGIN_SRC makefile :tangle yes
  .RECIPEPREFIX = >
  .DELETE_ON_ERROR :
  .PRECIOUS : 
  .DEFAULT : all
  
  datadir := data
  datafiles := report.csv scrubbed-report.csv
  trendurl := https://www.google.com/trends/explore\#q=%22job%20search%22&date=1%2F2004%20109m&cmpt=q
  
  .PHONY : all
  all : $(addprefix $(datadir)/,$(datafiles))
  
  .PHONY : clean
  clean :
  
  $(datadir)/report.csv :
  > @echo
  > @echo "Whoops!  Google, as of this writing, does not facilitate automatic"
  > @echo "downloading of trend reports.  Afraid you'll have to manually locate the"
  > @echo "\"$(@F)\" file and place it in the \"$(@D)\" folder to continue."
  > @echo
  > @echo "Head to:"
  > @echo "    $(trendurl)"
  > @echo "and select \"Download as CSV\" to get the \"$(@F)\" file."
  > @echo
  > @echo "Be sure to place the file in the \"$(@D)\" folder, or you'll see this again."
  > @echo
  > @exit 1
  
  $(datadir)/scrubbed-report.csv : $(datadir)/report.csv
  > sed -n -e 's/ .*,/,/' -e '5,/^$$/ p' >$@ <$<
  
  Makefile : search.org
  > emacs -Q --batch --visit=search.org --eval "(progn \
  (require 'org) \
  (require 'org-exp) \
  (require 'ob) \
  (require 'ob-tangle) \
  (re-search-forward \"^[ \\t]*#\\\\+begin_src[^\\n]*$@\") \
  (org-babel-tangle t))"
  > mv -f search.makefile Makefile
#+END_SRC

** R
:PROPERTIES:
:session:  *R-Search*
:END:

#+NAME read-source-data
#+BEGIN_SRC R :var filename="data/scrubbed-report.csv" :results silent
  report <- read.csv(filename, header = TRUE)
#+END_SRC

#+NAME plot-data
#+BEGIN_SRC R :results graphics :file plots/report.png
  plot.default(report, type = "l")
#+END_SRC

#+RESULTS[d9029dc9fa815b8254dc3d0f03783b88b98a0b8e]:
[[file:plots/report.png]]

#+NAME transform-data
#+BEGIN_SRC R :results graphics :file plots/trans-report.png
  trans.y = diff(log(report$job.search))
  plot.default(x = report$Week[2:length(report$Week)], y = trans.y, type = "l")
#+END_SRC

#+RESULTS[697488b1a42a0938dfcaf5d38e7b39914824006e]:
[[file:plots/trans-report.png]]

#+NAME acf-plots
#+BEGIN_SRC R :results graphics :file plots/acf-plots.png
  par(mfrow = c(2, 1))
  acf(trans.y, lag.max = 150)
  pacf(trans.y, lag.max = 150)
#+END_SRC

#+RESULTS[4a6f1c0f91d773bf752963aa99c24ae44168619c]:
[[file:plots/acf-plots.png]]

#+NAME full-trans-data
#+BEGIN_SRC R :results graphics :file plots/full-trans.png
  ftrans.y = diff(diff(log(report$job.search)), lag = 52)
  plot.default(x = report$Week[54:length(report$Week)], y = ftrans.y, type = "l")
#+END_SRC

#+RESULTS[463fab390551a48ad2f7f4c577182bff6d323fda]:
[[file:plots/full-trans.png]]

#+NAME: full-acf-plots
#+BEGIN_SRC R :results graphics :file plots/full-acf-plots.png
  par(mfrow = c(2, 1))
  acf(ftrans.y, lag.max = 150)
  pacf(ftrans.y, lag.max = 150)
#+END_SRC

#+RESULTS[5b12a83fd4c56eacfe7b4f89da9a2d4467ab2899]: full-acf-plots
[[file:plots/full-acf-plots.png]]

#+NAME arima-model
#+BEGIN_SRC R
  report.fit <- arima(log(report$job.search),
                      order=c(0, 1, 1),
                      seasonal=list(order=c(0, 1, 1), period=52),
                      include.mean=FALSE)
#+END_SRC

#+RESULTS[ab008945584b2d0edb4fe4e5469f0ee1d6ff7381]:

#+NAME arima-coefs
#+BEGIN_SRC R :colnames yes
  report.coef <- coef(report.fit)
  matrix(data = report.coef, ncol = length(report.coef),
         dimnames = list(c(), names(report.coef)))
#+END_SRC

#+RESULTS[4d0a465c877bbe8ffe6757aa3b1098c2c78990c6]:
|                ma1 |               sma1 |
|--------------------+--------------------|
| -0.644653993986152 | -0.232111217226574 |

#+NAME arima-coefs-var
#+BEGIN_SRC R :colnames yes
  report.vcov <- vcov(report.fit)
  vcov.slice <- seq(from = 1, to = length(report.vcov),
                    length.out = sqrt(length(report.vcov)))
  report.se <- sqrt(report.vcov[vcov.slice])
  matrix(data = report.se, ncol = length(report.coef),
         dimnames = list(c(), names(report.coef)))
#+END_SRC

#+RESULTS[409ed0b2828cb9a88aafc651bea683d2934465b0]:
|                ma1 |               sma1 |
|--------------------+--------------------|
| 0.0509935879616838 | 0.0494394720409993 |

* File Local Variables						   :noexport:

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:

* Footnotes
