#+TITLE: Regression Analysis Fall 2012
#+AUTHOR: Trevor Murphy
#+EMAIL: trevor.m.murphy+vee@gmail.com

#+OPTIONS: num:nil toc:nil

#+BEGIN_SRC latex
  \begin{abstract}
    We look at bitcoin trading data from the Mt Gox bitcoin exchange.
  \end{abstract}
#+END_SRC

* Introduction

Time series analysis can be helpful, I suppose. Perhaps it can tell us
something interesting about currencies?

Bitcoin is a fake currency that the internet invented. Despite that, it
seems to be doing something significant. Let's see.

* Data and Analysis

Mt Gox is an online bitcoin exchange, trading in various currencies from
around the world.  For various reasons, they make their trading data
available for analysis.

Bitcoincharts summarizes this data in a convenient format.

** Data Description

The data obtained from bitcoincharts gives basic trading info, in the
following format:

unixtime, price, amount

Here's some sample trades.

** Analysis with Python

Python is pretty sweet.  I'm not sure what to do for time series
analysis, since that's boring, but I'll bet I can pull off something
cool.

** Model

We settled with an AR(1) model ... or maybe MA(2) I dunno.  Here are
some graphs that show what's up.

* Conclusion

As you can see ... nothing.  Time series is terrible.

* Appendix

Maybe ... if you want some stuff it's here.

* Source Code							   :noexport:
:PROPERTIES:
:cache: yes
:END:

Evaluate this code block to update the report.
#+BEGIN_SRC sh :results silent
  make Makefile
  make
#+END_SRC

** Makefile
:PROPERTIES:
:eval:     never
:END:

#+NAME: grab-google-ngrams
#+BEGIN_SRC makefile :tangle yes
  .RECIPEPREFIX = >
  .DELETE_ON_ERROR :
  .PRECIOUS : 
  .PHONY : all clean
  .DEFAULT : all
  
  2013-01-01 := 1357016400
  datadir := data
  datafiles := bitcoincharts-mtgoxUSD-0-$(2013-01-01)-trades.csv
  
  all : $(datadir)/$(datafiles)
  
  clean :
  
  $(datadir)/$(datafiles) :
  > touch $(datadir)
  > curl -C - "http://bitcoincharts.com/t/trades.csv?symbol=mtgoxUSD&start=0&end=$(2013-01-01)" -o $@
  
  Makefile : bitcoin.org
  > emacs -Q --batch --visit=bitcoin.org --eval "(progn \
  (require 'org) \
  (require 'org-exp) \
  (require 'ob) \
  (require 'ob-tangle) \
  (re-search-forward \"^[ \\t]*#\\\\+begin_src[^\\n]*$@\") \
  (org-babel-tangle t))"
  > mv -f bitcoin.makefile Makefile
#+END_SRC

** Python
:PROPERTIES:
:session:  *Python-Bitcoin*
:END:

#+NAME: declare-imports
#+BEGIN_SRC python
  
  # # Boo, import Axes3D.  This is some object that pieces of the pyplot
  # # module need to know about for 3D plotting.  But pyplot can't find it
  # # by itself.  Needs some handholding - a/k/a a pointless object in the
  # # global namespace.  Bad, bad, matplotlib.  Not Pythonic.  No biscuit.
  # from mpl_toolkits.mplot3d import Axes3D
  from matplotlib import pyplot
  # from matplotlib import colors
  # from matplotlib import cm
  # from scipy import stats
  # import numpy
  import pandas
  from pandas.tools.plotting import autocorrelation_plot
  # import math
  from datetime import datetime
#+END_SRC

#+RESULTS[4821df35a8ba49af9f0af5cf7112d1245c733868]: declare-imports

#+NAME: get-raw-data-array
#+BEGIN_SRC python :var filename="data/bitcoincharts-mtgoxUSD-0-1357016400-trades.csv"
  
  # Read in lines from the data file.
  parse = lambda x: datetime.fromtimestamp(int(x))
  data = pandas.read_csv(filename, names=['unixtime', 'price', 'amount'],
                         index_col='unixtime', date_parser=parse)
  
  # Add total value of a trade = price * volume.
  data['value'] = data['price'] * data['amount']
#+END_SRC

#+RESULTS[d9cb8bb2736965c5557b5898df6c42850da2a784]: get-raw-data-array

#+NAME: summarize-data
#+BEGIN_SRC python
  
  # vwap = volume-weighted-average price
  # I want some vwap's to look at ... per minute, per hour, per day.
  minute_vwap = data.value.resample('1min', how='sum') / data.amount.resample('1min', how='sum')
  hourly_vwap = data.value.resample('H', how='sum') / data.amount.resample('H', how='sum')
  daily_vwap = data.value.resample('D', how='sum') / data.amount.resample('D', how='sum')
  
  # There are missing values in the previous (when a minute/hour/day goes by with no trades).
  # Sometimes it'll be nice to have time series data without missing values ... in which case, just
  # fill forward from the last available data point.
  minute_vwap_f = minute_vwap.fillna(method='ffill')
  hourly_vwap_f = hourly_vwap.fillna(method='ffill')
  daily_vwap_f = daily_vwap.fillna(method='ffill')
#+END_SRC

#+RESULTS[9b7544db112ed1349ebfe59c66554081bda3ecb4]: summarize-data

#+NAME: show-simple-plot
#+BEGIN_SRC python
  
  # Minute xcorr takes too long, and hourly / daily look the same.  So, daily for presentation.
  autocorrelation_plot(daily_vwap_f)
  pyplot.show()
#+END_SRC

#+RESULTS[e8bc120a4b4d444b45d24670508693061bf662ca]: show-simple-plot
: Axes(0.125,0.1;0.775x0.8)

* File Local Variables						   :noexport:

# Local Variables:
# fill-column: 72
# org-confirm-babel-evaluate: nil
# End:

* Footnotes
